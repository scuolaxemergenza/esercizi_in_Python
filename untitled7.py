# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JlzR1qTQ6AUS-gipJCV9YtA-fFEdOS_y
"""

# UPGRADE: need Sympy 1.2 or later, upgrade by running: "!pip install sympy --upgrade" in a code cell
# !pip install sympy --upgrade
import cmath
import numpy as np
import sympy as sp
import matplotlib.pyplot as plt
from IPython.display import HTML
from ipywidgets.widgets import interact, Play
sp.init_printing(use_latex=True)
display(HTML('<link rel="stylesheet" href="//stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"/>'))

x = sp.Function('x')
m, k, t, beta = sp.symbols('m k t beta')
# General Solution
sol = sp.dsolve(m*x(t).diff(t,2) + k*x(t) + beta*x(t).diff(t))
display("General Solution (damped system):", sol)

# Solution
sol = sp.dsolve(m*x(t).diff(t,2) + k*x(t) + beta*x(t).diff(t), ics={x(0): 0, x(t).diff(t).subs(t, 0): 0})
display("Solution with initial velocity and displacement = 0:", sp.simplify(sol))

@interact(t=Play(value=0, min=0, max=60, step=1, interval=500),
          m=(1,5,0.01), k=(1,5,0.01), beta=(0,5,0.01))
def update(t, m=1, k=1, beta=0):
  g = 1
  s = cmath.sqrt(beta**2 - 4*k*m)
  x = -((np.exp(-(((beta + s)*t)/(2*m)))*m*(beta*(-1 + np.exp((s*t)/m)) + (1 + np.exp((s*t)/m)-2*np.exp(((beta + s)*t)/(2*m)))*s))/(2*k*s))
  plt.xlim(0,10); plt.ylim(-0.1,0.1)
  plt.yticks([])
  plt.title('x = '+str(np.round(x,3)))
  plt.plot([0,x],[0,0],lw=50)